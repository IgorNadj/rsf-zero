import { describe, expect, test, vi } from 'vitest';
import {
  generateActionRegistryTs,
  generateActionRegistryJs,
  generateEmptyActionRegistryJs
} from '../../../src/transform/server/generateActionRegistry';
import { Action } from '../../../src/types';

// Mock asRelativeImport function with a very simple implementation
vi.mock('../../../src/utils/asRelativeImport.ts', () => ({
  asRelativeImport: vi.fn((targetPath, relativeToPath) => {
    return `/mocked/import/---${relativeToPath}---${targetPath}`;
  })
}));

// Mock getActionId so our expect is cleaner
vi.mock('../../../src/utils/getActionId.ts', () => ({
  getActionId: vi.fn((sourceFilePath, actionName) => {
    if (sourceFilePath === '/src/actions/user.ts') return `${actionName}_000`;
    if (sourceFilePath === '/src/actions/post.ts') return `${actionName}_001`;
    if (sourceFilePath === '/src/actions/auth.ts') return `${actionName}_002`;
  })
}));

describe('generateActionRegistry', () => {
  test('generateActionRegistryTs creates valid TypeScript import statements', () => {
    const mockActions: Action[] = [
      {
        id: 'createUser_000',
        name: 'createUser',
        sourceFilePath: '/src/actions/user.ts',
      },
      {
        id: 'default_001',
        name: 'default',
        sourceFilePath: '/src/actions/post.ts',
      },
      {
        id: 'login_002',
        name: 'login',
        sourceFilePath: '/src/actions/auth.ts',
      },
    ];

    const registryPath = '/src/registry.ts';

    const result = generateActionRegistryTs(mockActions, registryPath);

    expect(result).toEqual(`// Generated by RSF Zero, do not modify
import { createUser as createUser_000 } from '/mocked/import/---/src/registry.ts---/src/actions/user.ts';
import default_001 from '/mocked/import/---/src/registry.ts---/src/actions/post.ts';
import { login as login_002 } from '/mocked/import/---/src/registry.ts---/src/actions/auth.ts';
`);
  });

  test('generateActionRegistryJs creates valid JavaScript registry with imports and exports', () => {
    const mockActions: Action[] = [
      {
        id: 'createUser_000',
        name: 'createUser',
        sourceFilePath: '/src/actions/user.ts',
      },
      {
        id: 'default_001',
        name: 'default',
        sourceFilePath: '/src/actions/post.ts',
      },
      {
        id: 'login_002',
        name: 'login',
        sourceFilePath: '/src/actions/auth.ts',
      },
    ];

    const relativeToDir = '/dist';
    const result = generateActionRegistryJs(mockActions, relativeToDir);

    expect(result).toEqual(`// Generated by RSF Zero, do not modify
import { createUser as createUser_000 } from '/mocked/import/---/dist---/src/actions/user.js';
import default_001 from '/mocked/import/---/dist---/src/actions/post.js';
import { login as login_002 } from '/mocked/import/---/dist---/src/actions/auth.js';

export const actionRegistry = {
"createUser_000": createUser_000,
"default_001": default_001,
"login_002": login_002,
};
`
    );
  });


  test('generateEmptyActionRegistryJs', () => {
    const result = generateEmptyActionRegistryJs();

    expect(result).toEqual(`// Generated by RSF Zero, do not modify
export const actionRegistry = {};
`
    );
  });

});
